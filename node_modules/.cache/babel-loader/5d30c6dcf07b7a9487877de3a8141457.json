{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport styles from '../styles/styles';\n\nvar Home =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this, props));\n    _this.state = {\n      size: '1',\n      activation: 'softmax',\n      bias: false,\n      layers: [],\n      batchSize: '1',\n      epochs: '1'\n    };\n    _this.run = _this.run.bind(_assertThisInitialized(_this));\n    _this.handleSizeChange = _this.handleSizeChange.bind(_assertThisInitialized(_this));\n    _this.handleActivationChange = _this.handleActivationChange.bind(_assertThisInitialized(_this));\n    _this.handleBiasChange = _this.handleBiasChange.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    _this.handleBatchSizeChange = _this.handleBatchSizeChange.bind(_assertThisInitialized(_this));\n    _this.handleEpochsChange = _this.handleEpochsChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var carsDataReq, carsData, cleaned;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');\n\n              case 2:\n                carsDataReq = _context.sent;\n                _context.next = 5;\n                return carsDataReq.json();\n\n              case 5:\n                carsData = _context.sent;\n                cleaned = carsData.map(function (car) {\n                  return {\n                    mpg: car.Miles_per_Gallon,\n                    horsepower: car.Horsepower\n                  };\n                }).filter(function (car) {\n                  return car.mpg != null && car.horsepower != null;\n                });\n                return _context.abrupt(\"return\", cleaned);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"bindLayers\",\n    value: function bindLayers(layers) {\n      var chain = [],\n          i = 1;\n      layers.forEach(function (layer) {\n        if (i == 1) {\n          chain.push(tf.layers.dense({\n            inputShape: [1],\n            units: _parseInt(layer.size),\n            activation: layer.activation,\n            useBias: JSON.parse(layer.bias)\n          }));\n        } else {\n          chain.push(tf.layers.dense({\n            units: _parseInt(layer.size),\n            activation: layer.activation,\n            useBias: JSON.parse(layer.bias)\n          }));\n        }\n\n        i++;\n      });\n      chain.push(tf.layers.dense({\n        units: 1,\n        useBias: true\n      }));\n      return chain;\n    }\n  }, {\n    key: \"createModel\",\n    value: function createModel(chainedLayers) {\n      var model = tf.sequential({\n        layers: chainedLayers\n      });\n      return model;\n    }\n  }, {\n    key: \"convertToTensor\",\n    value: function convertToTensor(data) {\n      return tf.tidy(function () {\n        tf.util.shuffle(data);\n        var inputs = data.map(function (d) {\n          return d.horsepower;\n        });\n        var labels = data.map(function (d) {\n          return d.mpg;\n        });\n        var inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\n        var labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n        var inputMax = inputTensor.max();\n        var inputMin = inputTensor.min();\n        var labelMax = labelTensor.max();\n        var labelMin = labelTensor.min();\n        var normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\n        var normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n        return {\n          inputs: normalizedInputs,\n          labels: normalizedLabels,\n          inputMax: inputMax,\n          inputMin: inputMin,\n          labelMax: labelMax,\n          labelMin: labelMin\n        };\n      });\n    }\n  }, {\n    key: \"trainModel\",\n    value: function () {\n      var _trainModel = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(model, inputs, labels) {\n        var batchSize, epochs;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                model.compile({\n                  optimizer: tf.train.adam(),\n                  loss: tf.losses.meanSquaredError,\n                  metrics: ['mse']\n                });\n                batchSize = _parseInt(this.state.batchSize);\n                epochs = _parseInt(this.state.epochs);\n                _context2.next = 5;\n                return model.fit(inputs, labels, {\n                  batchSize: batchSize,\n                  epochs: epochs,\n                  shuffle: true,\n                  callbacks: tfvis.show.fitCallbacks({\n                    name: 'Training Performance'\n                  }, ['loss', 'mse'], {\n                    height: 200,\n                    callbacks: ['onEpochEnd']\n                  })\n                });\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function trainModel(_x, _x2, _x3) {\n        return _trainModel.apply(this, arguments);\n      }\n\n      return trainModel;\n    }()\n  }, {\n    key: \"testModel\",\n    value: function testModel(model, inputData, normalizationData) {\n      var inputMax = normalizationData.inputMax,\n          inputMin = normalizationData.inputMin,\n          labelMin = normalizationData.labelMin,\n          labelMax = normalizationData.labelMax;\n\n      var _tf$tidy = tf.tidy(function () {\n        var xs = tf.linspace(0, 1, 100);\n        var preds = model.predict(xs.reshape([100, 1]));\n        var unNormXs = xs.mul(inputMax.sub(inputMin)).add(inputMin);\n        var unNormPreds = preds.mul(labelMax.sub(labelMin)).add(labelMin);\n        return [unNormXs.dataSync(), unNormPreds.dataSync()];\n      }),\n          _tf$tidy2 = _slicedToArray(_tf$tidy, 2),\n          xs = _tf$tidy2[0],\n          preds = _tf$tidy2[1];\n\n      var predictedPoints = _Array$from(xs).map(function (val, i) {\n        return {\n          x: val,\n          y: preds[i]\n        };\n      });\n\n      var originalPoints = inputData.map(function (d) {\n        return {\n          x: d.horsepower,\n          y: d.mpg\n        };\n      });\n      tfvis.render.scatterplot({\n        name: 'Model Predictions vs Original Data'\n      }, {\n        values: [originalPoints, predictedPoints],\n        series: ['original', 'predicted']\n      }, {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      });\n    }\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var data, values, layers, model, surface, tensorData, inputs, labels;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getData();\n\n              case 2:\n                data = _context3.sent;\n                values = data.map(function (d) {\n                  return {\n                    x: d.horsepower,\n                    y: d.mpg\n                  };\n                });\n                layers = this.bindLayers(this.state.layers);\n                model = this.createModel(layers);\n                surface = {\n                  name: 'Model Summary',\n                  tab: 'Model Inspection'\n                };\n                tfvis.show.modelSummary(surface, model);\n                tfvis.render.scatterplot({\n                  name: 'Horsepower v MPG',\n                  tab: 'Data'\n                }, {\n                  values: values\n                }, {\n                  xLabel: 'Horsepower',\n                  yLabel: 'MPG',\n                  height: 300\n                });\n                tensorData = this.convertToTensor(data);\n                inputs = tensorData.inputs, labels = tensorData.labels;\n                _context3.next = 13;\n                return this.trainModel(model, inputs, labels);\n\n              case 13:\n                console.log('Done Training');\n                this.testModel(model, data, tensorData);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function run() {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }, {\n    key: \"handleSizeChange\",\n    value: function handleSizeChange(event) {\n      this.setState({\n        size: event.target.value\n      });\n    }\n  }, {\n    key: \"handleActivationChange\",\n    value: function handleActivationChange(event) {\n      this.setState({\n        activation: event.target.value\n      });\n    }\n  }, {\n    key: \"handleBiasChange\",\n    value: function handleBiasChange(event) {\n      this.setState({\n        bias: event.target.value\n      });\n    }\n  }, {\n    key: \"handleBatchSizeChange\",\n    value: function handleBatchSizeChange(event) {\n      this.setState({\n        batchSize: event.target.value\n      });\n    }\n  }, {\n    key: \"handleEpochsChange\",\n    value: function handleEpochsChange(event) {\n      this.setState({\n        epochs: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this2 = this;\n\n      console.log(this.state.activation);\n      this.setState(function (prevState) {\n        return {\n          layers: [].concat(_toConsumableArray(_this2.state.layers), [{\n            size: _this2.state.size,\n            activation: _this2.state.activation,\n            bias: _this2.state.bias\n          }])\n        };\n      });\n      event.preventDefault();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", null, React.createElement(\"h1\", {\n        style: styles.text\n      }, \"MATH 270 Honors Project Demo\"), React.createElement(\"h3\", {\n        style: styles.text\n      }, \"Dense Layer Generator:\"), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        style: styles.text\n      }, React.createElement(\"label\", null, React.createElement(\"span\", {\n        style: styles.bold\n      }, \"Size:\", ' '), React.createElement(\"input\", {\n        type: \"number\",\n        name: \"units\",\n        value: this.state.size,\n        onChange: this.handleSizeChange,\n        min: \"1\",\n        max: \"100\"\n      })), React.createElement(\"label\", {\n        style: styles.label\n      }, React.createElement(\"span\", {\n        style: styles.bold\n      }, \"Activation:\", ' '), React.createElement(\"select\", {\n        name: \"activation\",\n        value: this.state.activation,\n        onChange: this.handleActivationChange\n      }, React.createElement(\"option\", {\n        value: \"softmax\"\n      }, \"Normalized Exponential\"), React.createElement(\"option\", {\n        value: \"sigmoid\"\n      }, \"Sigmoid Function\"), React.createElement(\"option\", {\n        value: \"relu\"\n      }, \"Rectified Linear Unit\"), React.createElement(\"option\", {\n        value: \"tanh\"\n      }, \"Hyperbolic Tangent\"))), React.createElement(\"label\", {\n        style: styles.label\n      }, React.createElement(\"span\", {\n        style: styles.bold\n      }, \"Bias:\", ' '), React.createElement(\"input\", {\n        type: \"radio\",\n        value: \"true\",\n        checked: this.state.bias === 'true',\n        onChange: this.handleBiasChange\n      }), \"True\", React.createElement(\"input\", {\n        type: \"radio\",\n        value: \"false\",\n        checked: this.state.bias === 'false',\n        onChange: this.handleBiasChange\n      }), \"False\"), React.createElement(\"input\", {\n        style: styles.label,\n        type: \"submit\",\n        value: \"Add Layer\"\n      })), React.createElement(\"h3\", {\n        style: styles.text\n      }, \"Preview:\"), React.createElement(\"div\", {\n        style: styles.previewContainer\n      }, React.createElement(\"div\", {\n        style: styles.column\n      }, React.createElement(\"div\", {\n        style: styles.inputColumn\n      }, \"input\", React.createElement(\"br\", null), \"1\", React.createElement(\"br\", null), \"none\", React.createElement(\"br\", null), \"false\", React.createElement(\"br\", null)), React.createElement(\"div\", {\n        style: styles.arrow\n      }, \"\\u2192\")), this.state.layers.map(function (layer) {\n        return React.createElement(\"div\", {\n          style: styles.column\n        }, React.createElement(\"div\", {\n          style: styles.layerColumn\n        }, \"layer\", React.createElement(\"br\", null), layer.size, React.createElement(\"br\", null), layer.activation, React.createElement(\"br\", null), layer.bias, React.createElement(\"br\", null)), React.createElement(\"div\", {\n          style: styles.arrow\n        }, \"\\u2192\"));\n      }), React.createElement(\"div\", {\n        style: styles.column\n      }, React.createElement(\"div\", {\n        style: styles.outputColumn\n      }, \"output\", React.createElement(\"br\", null), \"1\", React.createElement(\"br\", null), \"none\", React.createElement(\"br\", null), \"true\", React.createElement(\"br\", null)), React.createElement(\"div\", {\n        style: styles.arrow\n      }))), React.createElement(\"h3\", {\n        style: styles.text\n      }, \"Training Parameters:\"), React.createElement(\"form\", {\n        style: styles.text\n      }, React.createElement(\"label\", null, \"Batch Size:\", ' ', React.createElement(\"input\", {\n        type: \"number\",\n        name: \"batch\",\n        value: this.state.batchSize,\n        onChange: this.handleBatchSizeChange,\n        min: \"1\",\n        max: \"100\"\n      })), React.createElement(\"label\", {\n        style: styles.label\n      }, \"Epochs:\", ' ', React.createElement(\"input\", {\n        type: \"number\",\n        name: \"units\",\n        value: this.state.epochs,\n        onChange: this.handleEpochsChange,\n        min: \"1\",\n        max: \"500\"\n      }))), React.createElement(\"button\", {\n        style: styles.button,\n        onClick: this.run\n      }, \"Compile, train, and test model\"), React.createElement(\"script\", {\n        src: \"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"\n      }), React.createElement(\"script\", {\n        src: \"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\"\n      }));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}