{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/malcolmmcswain/Desktop/honors/ml-models/pages/index.js\";\nimport React from 'react';\nimport styles from '../styles/styles';\n\nvar Home =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this, props));\n    _this.state = {\n      size: '',\n      activation: 'None',\n      bias: false,\n      layers: [],\n      batchSize: '',\n      epochs: ''\n    };\n    _this.run = _this.run.bind(_assertThisInitialized(_this));\n    _this.handleSizeChange = _this.handleSizeChange.bind(_assertThisInitialized(_this));\n    _this.handleActivationChange = _this.handleActivationChange.bind(_assertThisInitialized(_this));\n    _this.handleBiasChange = _this.handleBiasChange.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    _this.handleBatchSizeChange = _this.handleBatchSizeChange.bind(_assertThisInitialized(_this));\n    _this.handleEpochsChange = _this.handleEpochsChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var carsDataReq, carsData, cleaned;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');\n\n              case 2:\n                carsDataReq = _context.sent;\n                _context.next = 5;\n                return carsDataReq.json();\n\n              case 5:\n                carsData = _context.sent;\n                cleaned = carsData.map(function (car) {\n                  return {\n                    mpg: car.Miles_per_Gallon,\n                    horsepower: car.Horsepower\n                  };\n                }).filter(function (car) {\n                  return car.mpg != null && car.horsepower != null;\n                });\n                return _context.abrupt(\"return\", cleaned);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"bindLayers\",\n    value: function bindLayers(layers) {\n      var chain = [],\n          i = 1;\n      layers.forEach(function (layer) {\n        if (i == 1) {\n          chain.push(tf.layers.dense({\n            inputShape: [1],\n            units: _parseInt(layer.size),\n            activation: layer.activation,\n            useBias: JSON.parse(layer.bias)\n          }));\n        } else {\n          chain.push(tf.layers.dense({\n            units: _parseInt(layer.size),\n            activation: layer.activation,\n            useBias: JSON.parse(layer.bias)\n          }));\n        }\n\n        i++;\n      });\n      chain.push(tf.layers.dense({\n        units: 1,\n        useBias: true\n      }));\n      return chain;\n    }\n  }, {\n    key: \"createModel\",\n    value: function createModel(chainedLayers) {\n      var model = tf.sequential({\n        layers: chainedLayers\n      });\n      return model;\n    }\n  }, {\n    key: \"convertToTensor\",\n    value: function convertToTensor(data) {\n      return tf.tidy(function () {\n        tf.util.shuffle(data);\n        var inputs = data.map(function (d) {\n          return d.horsepower;\n        });\n        var labels = data.map(function (d) {\n          return d.mpg;\n        });\n        var inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\n        var labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n        var inputMax = inputTensor.max();\n        var inputMin = inputTensor.min();\n        var labelMax = labelTensor.max();\n        var labelMin = labelTensor.min();\n        var normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\n        var normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n        return {\n          inputs: normalizedInputs,\n          labels: normalizedLabels,\n          inputMax: inputMax,\n          inputMin: inputMin,\n          labelMax: labelMax,\n          labelMin: labelMin\n        };\n      });\n    }\n  }, {\n    key: \"trainModel\",\n    value: function () {\n      var _trainModel = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(model, inputs, labels) {\n        var batchSize, epochs;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                model.compile({\n                  optimizer: tf.train.adam(),\n                  loss: tf.losses.meanSquaredError,\n                  metrics: ['mse']\n                });\n                batchSize = this.state.batchSize;\n                epochs = this.state.epochs;\n                _context2.next = 5;\n                return model.fit(inputs, labels, {\n                  batchSize: batchSize,\n                  epochs: epochs,\n                  shuffle: true,\n                  callbacks: tfvis.show.fitCallbacks({\n                    name: 'Training Performance'\n                  }, ['loss', 'mse'], {\n                    height: 200,\n                    callbacks: ['onEpochEnd']\n                  })\n                });\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function trainModel(_x, _x2, _x3) {\n        return _trainModel.apply(this, arguments);\n      }\n\n      return trainModel;\n    }()\n  }, {\n    key: \"testModel\",\n    value: function testModel(model, inputData, normalizationData) {\n      var inputMax = normalizationData.inputMax,\n          inputMin = normalizationData.inputMin,\n          labelMin = normalizationData.labelMin,\n          labelMax = normalizationData.labelMax;\n\n      var _tf$tidy = tf.tidy(function () {\n        var xs = tf.linspace(0, 1, 100);\n        var preds = model.predict(xs.reshape([100, 1]));\n        var unNormXs = xs.mul(inputMax.sub(inputMin)).add(inputMin);\n        var unNormPreds = preds.mul(labelMax.sub(labelMin)).add(labelMin);\n        return [unNormXs.dataSync(), unNormPreds.dataSync()];\n      }),\n          _tf$tidy2 = _slicedToArray(_tf$tidy, 2),\n          xs = _tf$tidy2[0],\n          preds = _tf$tidy2[1];\n\n      var predictedPoints = _Array$from(xs).map(function (val, i) {\n        return {\n          x: val,\n          y: preds[i]\n        };\n      });\n\n      var originalPoints = inputData.map(function (d) {\n        return {\n          x: d.horsepower,\n          y: d.mpg\n        };\n      });\n      tfvis.render.scatterplot({\n        name: 'Model Predictions vs Original Data'\n      }, {\n        values: [originalPoints, predictedPoints],\n        series: ['original', 'predicted']\n      }, {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      });\n    }\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var data, values, layers, model, surface, tensorData, inputs, labels;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getData();\n\n              case 2:\n                data = _context3.sent;\n                values = data.map(function (d) {\n                  return {\n                    x: d.horsepower,\n                    y: d.mpg\n                  };\n                });\n                layers = this.bindLayers(this.state.layers);\n                model = this.createModel(layers);\n                surface = {\n                  name: 'Model Summary',\n                  tab: 'Model Inspection'\n                };\n                tfvis.show.modelSummary(surface, model);\n                tfvis.render.scatterplot({\n                  name: 'Horsepower v MPG',\n                  tab: 'Data'\n                }, {\n                  values: values\n                }, {\n                  xLabel: 'Horsepower',\n                  yLabel: 'MPG',\n                  height: 300\n                });\n                tensorData = this.convertToTensor(data);\n                inputs = tensorData.inputs, labels = tensorData.labels;\n                _context3.next = 13;\n                return this.trainModel(model, inputs, labels);\n\n              case 13:\n                console.log('Done Training');\n                this.testModel(model, data, tensorData);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function run() {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }, {\n    key: \"handleSizeChange\",\n    value: function handleSizeChange(event) {\n      this.setState({\n        size: event.target.value\n      });\n    }\n  }, {\n    key: \"handleActivationChange\",\n    value: function handleActivationChange(event) {\n      this.setState({\n        activation: event.target.value\n      });\n    }\n  }, {\n    key: \"handleBiasChange\",\n    value: function handleBiasChange(event) {\n      this.setState({\n        bias: event.target.value\n      });\n    }\n  }, {\n    key: \"handleBatchSizeChange\",\n    value: function handleBatchSizeChange(event) {\n      this.setState({\n        batchSize: event.target.value\n      });\n    }\n  }, {\n    key: \"handleEpochsChange\",\n    value: function handleEpochsChange(event) {\n      this.setState({\n        epochs: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this2 = this;\n\n      console.log(this.state.activation);\n      this.setState(function (prevState) {\n        return {\n          layers: [].concat(_toConsumableArray(_this2.state.layers), [{\n            size: _this2.state.size,\n            activation: _this2.state.activation,\n            bias: _this2.state.bias\n          }])\n        };\n      });\n      event.preventDefault();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"MATH 270 Honors Project Demo\"), React.createElement(\"h3\", {\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"Dense Layer Generator:\"), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: styles.bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Size:\", ' '), React.createElement(\"input\", {\n        type: \"number\",\n        name: \"units\",\n        value: this.state.size,\n        onChange: this.handleSizeChange,\n        min: \"1\",\n        max: \"100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        style: styles.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: styles.bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"Activation:\", ' '), React.createElement(\"select\", {\n        name: \"activation\",\n        value: this.state.activation,\n        onChange: this.handleActivationChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"None\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"None\"), React.createElement(\"option\", {\n        value: \"sigmoid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Sigmoid\"), React.createElement(\"option\", {\n        value: \"relu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"ReLu\"))), React.createElement(\"label\", {\n        style: styles.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: styles.bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \"Bias:\", ' '), React.createElement(\"input\", {\n        type: \"radio\",\n        value: \"true\",\n        checked: this.state.bias === 'true',\n        onChange: this.handleBiasChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), \"True\", React.createElement(\"input\", {\n        type: \"radio\",\n        value: \"false\",\n        checked: this.state.bias === 'false',\n        onChange: this.handleBiasChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }), \"False\"), React.createElement(\"input\", {\n        style: styles.label,\n        type: \"submit\",\n        value: \"Add Layer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      })), React.createElement(\"h3\", {\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, \"Preview:\"), React.createElement(\"div\", {\n        style: styles.previewContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: styles.column,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: styles.inputColumn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, \"input\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }), \"1\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }), \"none\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }), \"false\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: styles.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, \"\\u2192\")), this.state.layers.map(function (layer) {\n        return React.createElement(\"div\", {\n          style: styles.column,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: styles.layerColumn,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282\n          },\n          __self: this\n        }, \"layer\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          },\n          __self: this\n        }), layer.size, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        }), layer.activation, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285\n          },\n          __self: this\n        }), layer.bias, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          style: styles.arrow,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }, \"\\u2192\"));\n      }), React.createElement(\"div\", {\n        style: styles.column,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: styles.outputColumn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, \"output\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }), \"1\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }), \"none\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }), \"true\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: styles.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }))), React.createElement(\"h3\", {\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, \"Training Parameters:\"), React.createElement(\"form\", {\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, \"Batch Size:\", ' ', React.createElement(\"input\", {\n        type: \"number\",\n        name: \"batch\",\n        value: this.state.batchSize,\n        onChange: this.handleBatchSizeChange,\n        min: \"1\",\n        max: \"100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        style: styles.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"Epochs:\", ' ', React.createElement(\"input\", {\n        type: \"number\",\n        name: \"units\",\n        value: this.state.epochs,\n        onChange: this.handleEpochsChange,\n        min: \"1\",\n        max: \"500\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }))), React.createElement(\"button\", {\n        style: styles.button,\n        onClick: this.run,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, \"Compile, train, and test model\"), React.createElement(\"script\", {\n        src: \"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }), React.createElement(\"script\", {\n        src: \"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport default Home;","map":{"version":3,"sources":["/Users/malcolmmcswain/Desktop/honors/ml-models/pages/index.js"],"names":["React","styles","Home","props","state","size","activation","bias","layers","batchSize","epochs","run","bind","handleSizeChange","handleActivationChange","handleBiasChange","handleSubmit","handleBatchSizeChange","handleEpochsChange","fetch","carsDataReq","json","carsData","cleaned","map","car","mpg","Miles_per_Gallon","horsepower","Horsepower","filter","chain","i","forEach","layer","push","tf","dense","inputShape","units","useBias","JSON","parse","chainedLayers","model","sequential","data","tidy","util","shuffle","inputs","d","labels","inputTensor","tensor2d","length","labelTensor","inputMax","max","inputMin","min","labelMax","labelMin","normalizedInputs","sub","div","normalizedLabels","compile","optimizer","train","adam","loss","losses","meanSquaredError","metrics","fit","callbacks","tfvis","show","fitCallbacks","name","height","inputData","normalizationData","xs","linspace","preds","predict","reshape","unNormXs","mul","add","unNormPreds","dataSync","predictedPoints","val","x","y","originalPoints","render","scatterplot","values","series","xLabel","yLabel","getData","bindLayers","createModel","surface","tab","modelSummary","tensorData","convertToTensor","trainModel","console","log","testModel","event","setState","target","value","prevState","preventDefault","text","bold","label","previewContainer","column","inputColumn","arrow","layerColumn","outputColumn","button","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styles from '../styles/styles'\n\nclass Home extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: '',\n      activation: 'None',\n      bias: false,\n      layers: [],\n      batchSize: '',\n      epochs: '',\n    };\n\n    this.run = this.run.bind(this);\n    this.handleSizeChange = this.handleSizeChange.bind(this);\n    this.handleActivationChange = this.handleActivationChange.bind(this);\n    this.handleBiasChange = this.handleBiasChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleBatchSizeChange = this.handleBatchSizeChange.bind(this);\n    this.handleEpochsChange = this.handleEpochsChange.bind(this);\n  }\n\n  async getData() {\n    const carsDataReq = await fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');\n    const carsData = await carsDataReq.json();\n    const cleaned = carsData.map(car => ({\n      mpg: car.Miles_per_Gallon,\n      horsepower: car.Horsepower,\n    })).filter(car => (car.mpg != null && car.horsepower != null));\n\n    return cleaned;\n  }\n\n  bindLayers(layers) {\n    let chain = [], i = 1;\n    layers.forEach((layer) => {\n      if (i == 1) {\n        chain.push(tf.layers.dense({\n          inputShape: [1],\n          units: parseInt(layer.size),\n          activation: layer.activation,\n          useBias: JSON.parse(layer.bias)\n        }));\n      } else {\n        chain.push(tf.layers.dense({\n          units: parseInt(layer.size),\n          activation: layer.activation,\n          useBias: JSON.parse(layer.bias)\n        }));\n      }\n      i++;\n    });\n    chain.push(tf.layers.dense({units: 1, useBias: true}));\n    return chain;\n  }\n\n  createModel(chainedLayers) {\n    const model = tf.sequential({\n      layers: chainedLayers\n    });\n\n    return model;\n  }\n\n  convertToTensor(data) {\n    return tf.tidy(() => {\n      tf.util.shuffle(data);\n\n      const inputs = data.map(d => d.horsepower);\n      const labels = data.map(d => d.mpg);\n\n      const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\n      const labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n\n      const inputMax = inputTensor.max();\n      const inputMin = inputTensor.min();\n      const labelMax = labelTensor.max();\n      const labelMin = labelTensor.min();\n\n      const normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\n      const normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n\n      return {\n        inputs: normalizedInputs,\n        labels: normalizedLabels,\n        inputMax,\n        inputMin,\n        labelMax,\n        labelMin,\n      }\n    })\n  }\n\n  async trainModel(model, inputs, labels) {\n    model.compile({\n      optimizer: tf.train.adam(),\n      loss: tf.losses.meanSquaredError,\n      metrics: ['mse'],\n    });\n\n    const batchSize = this.state.batchSize;\n    const epochs = this.state.epochs;\n\n    return await model.fit(inputs, labels, {\n      batchSize,\n      epochs,\n      shuffle: true,\n      callbacks: tfvis.show.fitCallbacks(\n        { name: 'Training Performance' },\n        ['loss', 'mse'],\n        {\n          height: 200,\n          callbacks: ['onEpochEnd']\n        }\n      )\n    });\n  }\n\n  testModel(model, inputData, normalizationData) {\n    const {inputMax, inputMin, labelMin, labelMax} = normalizationData;\n\n    const [xs, preds] = tf.tidy(() => {\n      const xs = tf.linspace(0, 1, 100);\n      const preds = model.predict(xs.reshape([100, 1]));\n\n      const unNormXs = xs.mul(inputMax.sub(inputMin)).add(inputMin);\n      const unNormPreds = preds.mul(labelMax.sub(labelMin)).add(labelMin);\n\n      return [unNormXs.dataSync(), unNormPreds.dataSync()];\n    });\n\n    const predictedPoints = Array.from(xs).map((val, i) => {\n      return {x: val, y: preds[i]}\n    });\n\n    const originalPoints = inputData.map(d => ({\n      x: d.horsepower,\n      y: d.mpg,\n    }));\n\n    tfvis.render.scatterplot(\n      {name: 'Model Predictions vs Original Data'},\n      {values: [originalPoints, predictedPoints], series: ['original', 'predicted']},\n      {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      }\n    );\n  }\n\n  async run() {\n\n    const data = await this.getData();\n    const values = data.map(d => ({\n      x: d.horsepower,\n      y: d.mpg,\n    }));\n\n    const layers = this.bindLayers(this.state.layers);\n    const model = this.createModel(layers);\n    const surface = { name: 'Model Summary', tab: 'Model Inspection' };\n    tfvis.show.modelSummary(surface, model);\n\n    tfvis.render.scatterplot(\n      { name: 'Horsepower v MPG', tab: 'Data' },\n      {values},\n      {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      }\n    );\n\n    const tensorData = this.convertToTensor(data);\n    const {inputs, labels} = tensorData;\n\n    await this.trainModel(model, inputs, labels);\n    console.log('Done Training');\n\n    this.testModel(model, data, tensorData);\n  }\n\n  handleSizeChange(event) {\n    this.setState({size: event.target.value});\n  }\n\n  handleActivationChange(event) {\n    this.setState({activation: event.target.value});\n  }\n\n  handleBiasChange(event) {\n    this.setState({bias: event.target.value});\n  }\n\n  handleBatchSizeChange(event) {\n    this.setState({batchSize: event.target.value});\n  }\n\n  handleEpochsChange(event) {\n    this.setState({epochs: event.target.value});\n  }\n\n  handleSubmit(event) {\n    console.log(this.state.activation);\n    this.setState(prevState => ({\n      layers: [...this.state.layers, {\n        size: this.state.size,\n        activation: this.state.activation,\n        bias: this.state.bias\n      }]\n    }));\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div>\n\n        <h1 style={styles.text}>MATH 270 Honors Project Demo</h1>\n        <h3 style={styles.text}>Dense Layer Generator:</h3>\n\n        <form onSubmit={this.handleSubmit} style={styles.text}>\n          <label>\n            <span style={styles.bold}>Size:{' '}</span>\n            <input\n              type=\"number\"\n              name=\"units\"\n              value={this.state.size}\n              onChange={this.handleSizeChange}\n              min=\"1\"\n              max=\"100\"\n            />\n          </label>\n          <label style={styles.label}>\n            <span style={styles.bold}>Activation:{' '}</span>\n            <select\n              name=\"activation\"\n              value={this.state.activation}\n              onChange={this.handleActivationChange}\n            >\n              <option value=\"None\">None</option>\n              <option value=\"sigmoid\">Sigmoid</option>\n              <option value=\"relu\">ReLu</option>\n            </select>\n          </label>\n          <label style={styles.label}>\n            <span style={styles.bold}>Bias:{' '}</span>\n            <input\n              type=\"radio\"\n              value=\"true\"\n              checked={this.state.bias === 'true'}\n              onChange={this.handleBiasChange}\n            />True\n            <input\n              type=\"radio\"\n              value=\"false\"\n              checked={this.state.bias === 'false'}\n              onChange={this.handleBiasChange}\n            />False\n          </label>\n          <input style={styles.label} type=\"submit\" value=\"Add Layer\" />\n        </form>\n\n        <h3 style={styles.text}>Preview:</h3>\n\n        <div style={styles.previewContainer}>\n          <div style={styles.column}>\n            <div style={styles.inputColumn}>\n              input<br />\n              1<br />\n              none<br />\n              false<br />\n            </div>\n            <div style={styles.arrow}>→</div>\n          </div>\n          {this.state.layers.map((layer) => (\n              <div style={styles.column}>\n                <div style={styles.layerColumn}>\n                  layer<br />\n                  {layer.size}<br />\n                  {layer.activation}<br />\n                  {layer.bias}<br />\n                </div>\n                <div style={styles.arrow}>→</div>\n              </div>\n          ))}\n          <div style={styles.column}>\n            <div style={styles.outputColumn}>\n              output<br />\n              1<br />\n              none<br />\n              true<br />\n            </div>\n            <div style={styles.arrow}/>\n          </div>\n        </div>\n\n        <h3 style={styles.text}>Training Parameters:</h3>\n\n        <form style={styles.text}>\n          <label>\n            Batch Size:{' '}\n            <input\n              type=\"number\"\n              name=\"batch\"\n              value={this.state.batchSize}\n              onChange={this.handleBatchSizeChange}\n              min=\"1\"\n              max=\"100\"\n            />\n          </label>\n          <label style={styles.label}>\n            Epochs:{' '}\n            <input\n              type=\"number\"\n              name=\"units\"\n              value={this.state.epochs}\n              onChange={this.handleEpochsChange}\n              min=\"1\"\n              max=\"500\"\n            />\n          </label>\n        </form>\n\n        <button style={styles.button} onClick={this.run}>\n          Compile, train, and test model\n        </button>\n\n        <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>\n        <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\"></script>\n      </div>\n    )\n  }\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}