{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/malcolmmcswain/Desktop/honors/ml-models/pages/index.js\";\nimport React from 'react';\n\nvar Home =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  function Home() {\n    _classCallCheck(this, Home);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Home).apply(this, arguments));\n  }\n\n  _createClass(Home, [{\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var carsDataReq, carsData, cleaned;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');\n\n              case 2:\n                carsDataReq = _context.sent;\n                _context.next = 5;\n                return carsDataReq.json();\n\n              case 5:\n                carsData = _context.sent;\n                cleaned = carsData.map(function (car) {\n                  return {\n                    mpg: car.Miles_per_Gallon,\n                    horsepower: car.Horsepower\n                  };\n                }).filter(function (car) {\n                  return car.mpg != null && car.horsepower != null;\n                });\n                return _context.abrupt(\"return\", cleaned);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"createModel\",\n    value: function createModel() {\n      var model = tf.sequential({\n        layers: [tf.layers.dense({\n          inputShape: [1],\n          units: 16,\n          useBias: true\n        }), tf.layers.dense({\n          units: 50,\n          activation: 'relu'\n        }), tf.layers.dense({\n          units: 50,\n          activation: 'sigmoid'\n        }), tf.layers.dense({\n          units: 1,\n          useBias: true\n        })]\n      });\n      return model;\n    }\n  }, {\n    key: \"convertToTensor\",\n    value: function convertToTensor(data) {\n      return tf.tidy(function () {\n        tf.util.shuffle(data);\n        var inputs = data.map(function (d) {\n          return d.horsepower;\n        });\n        var labels = data.map(function (d) {\n          return d.mpg;\n        });\n        var inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\n        var labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n        var inputMax = inputTensor.max();\n        var inputMin = inputTensor.min();\n        var labelMax = labelTensor.max();\n        var labelMin = labelTensor.min();\n        var normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\n        var normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n        return {\n          inputs: normalizedInputs,\n          labels: normalizedLabels,\n          inputMax: inputMax,\n          inputMin: inputMin,\n          labelMax: labelMax,\n          labelMin: labelMin\n        };\n      });\n    }\n  }, {\n    key: \"trainModel\",\n    value: function () {\n      var _trainModel = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(model, inputs, labels) {\n        var batchSize, epochs;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                model.compile({\n                  optimizer: tf.train.adam(),\n                  loss: tf.losses.meanSquaredError,\n                  metrics: ['mse']\n                });\n                batchSize = 28;\n                epochs = 100;\n                _context2.next = 5;\n                return model.fit(inputs, labels, {\n                  batchSize: batchSize,\n                  epochs: epochs,\n                  shuffle: true,\n                  callbacks: tfvis.show.fitCallbacks({\n                    name: 'Training Performance'\n                  }, ['loss', 'mse'], {\n                    height: 200,\n                    callbacks: ['onEpochEnd']\n                  })\n                });\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function trainModel(_x, _x2, _x3) {\n        return _trainModel.apply(this, arguments);\n      }\n\n      return trainModel;\n    }()\n  }, {\n    key: \"testModel\",\n    value: function testModel(model, inputData, normalizationData) {\n      var inputMax = normalizationData.inputMax,\n          inputMin = normalizationData.inputMin,\n          labelMin = normalizationData.labelMin,\n          labelMax = normalizationData.labelMax;\n\n      var _tf$tidy = tf.tidy(function () {\n        var xs = tf.linspace(0, 1, 100);\n        var preds = model.predict(xs.reshape([100, 1]));\n        var unNormXs = xs.mul(inputMax.sub(inputMin)).add(inputMin);\n        var unNormPreds = preds.mul(labelMax.sub(labelMin)).add(labelMin);\n        return [unNormXs.dataSync(), unNormPreds.dataSync()];\n      }),\n          _tf$tidy2 = _slicedToArray(_tf$tidy, 2),\n          xs = _tf$tidy2[0],\n          preds = _tf$tidy2[1];\n\n      var predictedPoints = _Array$from(xs).map(function (val, i) {\n        return {\n          x: val,\n          y: preds[i]\n        };\n      });\n\n      var originalPoints = inputData.map(function (d) {\n        return {\n          x: d.horsepower,\n          y: d.mpg\n        };\n      });\n      tfvis.render.scatterplot({\n        name: 'Model Predictions vs Original Data'\n      }, {\n        values: [originalPoints, predictedPoints],\n        series: ['original', 'predicted']\n      }, {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      });\n    }\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var data, values, model, surface, tensorData, inputs, labels;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getData();\n\n              case 2:\n                data = _context3.sent;\n                values = data.map(function (d) {\n                  return {\n                    x: d.horsepower,\n                    y: d.mpg\n                  };\n                });\n                model = this.createModel();\n                surface = {\n                  name: 'Model Summary',\n                  tab: 'Model Inspection'\n                };\n                tfvis.show.modelSummary(surface, model);\n                tfvis.render.scatterplot({\n                  name: 'Horsepower v MPG',\n                  tab: 'Data'\n                }, {\n                  values: values\n                }, {\n                  xLabel: 'Horsepower',\n                  yLabel: 'MPG',\n                  height: 300\n                });\n                tensorData = this.convertToTensor(data);\n                inputs = tensorData.inputs, labels = tensorData.labels;\n                _context3.next = 12;\n                return this.trainModel(model, inputs, labels);\n\n              case 12:\n                console.log('Done Training');\n                this.testModel(model, data, tensorData);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function run() {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /*componentDidMount() {\n      this.run();\n    }*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          fontFamily: 'Helvetica'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"MATH 270 Honors Project Demo\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Design a neural network\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Generate Layer:\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Size:\", ' ', React.createElement(\"input\", {\n        type: \"number\",\n        name: \"units\",\n        min: \"1\",\n        max: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        style: {\n          marginLeft: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"bold\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Activation:\", ' '), React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"activation\",\n        value: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), \"None\", React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"activation\",\n        value: \"sigmoid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), \"Sigmoid\", React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"activation\",\n        value: \"relu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), \"ReLu\"), React.createElement(\"label\", {\n        style: {\n          marginLeft: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Bias:\", ' ', React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"bias\",\n        value: \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), \"True\", React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"bias\",\n        value: \"sigmoid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), \"False\")), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"Preview:\"), React.createElement(\"script\", {\n        src: \"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(\"script\", {\n        src: \"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport default Home;","map":{"version":3,"sources":["/Users/malcolmmcswain/Desktop/honors/ml-models/pages/index.js"],"names":["React","Home","fetch","carsDataReq","json","carsData","cleaned","map","car","mpg","Miles_per_Gallon","horsepower","Horsepower","filter","model","tf","sequential","layers","dense","inputShape","units","useBias","activation","data","tidy","util","shuffle","inputs","d","labels","inputTensor","tensor2d","length","labelTensor","inputMax","max","inputMin","min","labelMax","labelMin","normalizedInputs","sub","div","normalizedLabels","compile","optimizer","train","adam","loss","losses","meanSquaredError","metrics","batchSize","epochs","fit","callbacks","tfvis","show","fitCallbacks","name","height","inputData","normalizationData","xs","linspace","preds","predict","reshape","unNormXs","mul","add","unNormPreds","dataSync","predictedPoints","val","i","x","y","originalPoints","render","scatterplot","values","series","xLabel","yLabel","getData","createModel","surface","tab","modelSummary","tensorData","convertToTensor","trainModel","console","log","testModel","fontFamily","marginLeft","Component"],"mappings":"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","sourcesContent":["import React from 'react'\n\nclass Home extends React.Component {\n\n  async getData() {\n    const carsDataReq = await fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');\n    const carsData = await carsDataReq.json();\n    const cleaned = carsData.map(car => ({\n      mpg: car.Miles_per_Gallon,\n      horsepower: car.Horsepower,\n    })).filter(car => (car.mpg != null && car.horsepower != null));\n\n    return cleaned;\n  }\n\n  createModel() {\n    const model = tf.sequential({\n      layers: [\n        tf.layers.dense({inputShape: [1], units: 16, useBias: true}),\n        tf.layers.dense({units: 50, activation: 'relu'}),\n        tf.layers.dense({units: 50, activation: 'sigmoid'}),\n        tf.layers.dense({units: 1, useBias: true}),\n      ]\n    });\n\n    return model;\n  }\n\n  convertToTensor(data) {\n    return tf.tidy(() => {\n      tf.util.shuffle(data);\n\n      const inputs = data.map(d => d.horsepower);\n      const labels = data.map(d => d.mpg);\n\n      const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\n      const labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n\n      const inputMax = inputTensor.max();\n      const inputMin = inputTensor.min();\n      const labelMax = labelTensor.max();\n      const labelMin = labelTensor.min();\n\n      const normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\n      const normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n\n      return {\n        inputs: normalizedInputs,\n        labels: normalizedLabels,\n        inputMax,\n        inputMin,\n        labelMax,\n        labelMin,\n      }\n    })\n  }\n\n  async trainModel(model, inputs, labels) {\n    model.compile({\n      optimizer: tf.train.adam(),\n      loss: tf.losses.meanSquaredError,\n      metrics: ['mse'],\n    });\n\n    const batchSize = 28;\n    const epochs = 100;\n\n    return await model.fit(inputs, labels, {\n      batchSize,\n      epochs,\n      shuffle: true,\n      callbacks: tfvis.show.fitCallbacks(\n        { name: 'Training Performance' },\n        ['loss', 'mse'],\n        {\n          height: 200,\n          callbacks: ['onEpochEnd']\n        }\n      )\n    });\n  }\n\n  testModel(model, inputData, normalizationData) {\n    const {inputMax, inputMin, labelMin, labelMax} = normalizationData;\n\n    const [xs, preds] = tf.tidy(() => {\n      const xs = tf.linspace(0, 1, 100);\n      const preds = model.predict(xs.reshape([100, 1]));\n\n      const unNormXs = xs.mul(inputMax.sub(inputMin)).add(inputMin);\n      const unNormPreds = preds.mul(labelMax.sub(labelMin)).add(labelMin);\n\n      return [unNormXs.dataSync(), unNormPreds.dataSync()];\n    });\n\n    const predictedPoints = Array.from(xs).map((val, i) => {\n      return {x: val, y: preds[i]}\n    });\n\n    const originalPoints = inputData.map(d => ({\n      x: d.horsepower,\n      y: d.mpg,\n    }));\n\n    tfvis.render.scatterplot(\n      {name: 'Model Predictions vs Original Data'},\n      {values: [originalPoints, predictedPoints], series: ['original', 'predicted']},\n      {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      }\n    );\n  }\n\n  async run() {\n\n    const data = await this.getData();\n    const values = data.map(d => ({\n      x: d.horsepower,\n      y: d.mpg,\n    }));\n\n    const model = this.createModel();\n    const surface = { name: 'Model Summary', tab: 'Model Inspection' };\n    tfvis.show.modelSummary(surface, model);\n\n    tfvis.render.scatterplot(\n      { name: 'Horsepower v MPG', tab: 'Data' },\n      {values},\n      {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      }\n    );\n\n    const tensorData = this.convertToTensor(data);\n    const {inputs, labels} = tensorData;\n\n    await this.trainModel(model, inputs, labels);\n    console.log('Done Training');\n\n    this.testModel(model, data, tensorData);\n  }\n\n  /*componentDidMount() {\n    this.run();\n  }*/\n\n  render() {\n    return (\n      <div>\n        <h1 style={{fontFamily: 'Helvetica'}}>MATH 270 Honors Project Demo</h1>\n        <h2>Design a neural network</h2>\n        <form>\n          <h3>Generate Layer:</h3>\n          <label>\n            Size:{' '}\n            <input type=\"number\" name=\"units\" min=\"1\" max=\"50\"/>\n          </label>\n          <label style={{marginLeft: 20}}>\n            <bold>Activation:{' '}</bold>\n            <input type=\"radio\" name=\"activation\" value=\"none\"/>None\n            <input type=\"radio\" name=\"activation\" value=\"sigmoid\"/>Sigmoid\n            <input type=\"radio\" name=\"activation\" value=\"relu\"/>ReLu\n          </label>\n          <label style={{marginLeft: 20}}>\n            Bias:{' '}\n            <input type=\"radio\" name=\"bias\" value=\"true\"/>True\n            <input type=\"radio\" name=\"bias\" value=\"sigmoid\"/>False\n          </label>\n        </form>\n        <h2>Preview:</h2>\n        <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>\n        <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\"></script>\n      </div>\n    )\n  }\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}