{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/malcolmmcswain/Desktop/honors/ml-models/pages/index.js\";\nimport React from 'react';\n\nvar Home =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this, props));\n    _this.state = {\n      size: 1,\n      activation: 'none',\n      bias: false,\n      layers: []\n    };\n    _this.handleSizeChange = _this.handleSizeChange.bind(_assertThisInitialized(_this));\n    _this.handleActivationChange = _this.handleActivationChange.bind(_assertThisInitialized(_this));\n    _this.handleBiasChange = _this.handleBiasChange.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var carsDataReq, carsData, cleaned;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');\n\n              case 2:\n                carsDataReq = _context.sent;\n                _context.next = 5;\n                return carsDataReq.json();\n\n              case 5:\n                carsData = _context.sent;\n                cleaned = carsData.map(function (car) {\n                  return {\n                    mpg: car.Miles_per_Gallon,\n                    horsepower: car.Horsepower\n                  };\n                }).filter(function (car) {\n                  return car.mpg != null && car.horsepower != null;\n                });\n                return _context.abrupt(\"return\", cleaned);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"createModel\",\n    value: function createModel() {\n      var model = tf.sequential({\n        layers: [tf.layers.dense({\n          inputShape: [1],\n          units: 16,\n          useBias: true\n        }), tf.layers.dense({\n          units: 50,\n          activation: 'relu'\n        }), tf.layers.dense({\n          units: 50,\n          activation: 'sigmoid'\n        }), tf.layers.dense({\n          units: 1,\n          useBias: true\n        })]\n      });\n      return model;\n    }\n  }, {\n    key: \"convertToTensor\",\n    value: function convertToTensor(data) {\n      return tf.tidy(function () {\n        tf.util.shuffle(data);\n        var inputs = data.map(function (d) {\n          return d.horsepower;\n        });\n        var labels = data.map(function (d) {\n          return d.mpg;\n        });\n        var inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\n        var labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n        var inputMax = inputTensor.max();\n        var inputMin = inputTensor.min();\n        var labelMax = labelTensor.max();\n        var labelMin = labelTensor.min();\n        var normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\n        var normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n        return {\n          inputs: normalizedInputs,\n          labels: normalizedLabels,\n          inputMax: inputMax,\n          inputMin: inputMin,\n          labelMax: labelMax,\n          labelMin: labelMin\n        };\n      });\n    }\n  }, {\n    key: \"trainModel\",\n    value: function () {\n      var _trainModel = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(model, inputs, labels) {\n        var batchSize, epochs;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                model.compile({\n                  optimizer: tf.train.adam(),\n                  loss: tf.losses.meanSquaredError,\n                  metrics: ['mse']\n                });\n                batchSize = 28;\n                epochs = 100;\n                _context2.next = 5;\n                return model.fit(inputs, labels, {\n                  batchSize: batchSize,\n                  epochs: epochs,\n                  shuffle: true,\n                  callbacks: tfvis.show.fitCallbacks({\n                    name: 'Training Performance'\n                  }, ['loss', 'mse'], {\n                    height: 200,\n                    callbacks: ['onEpochEnd']\n                  })\n                });\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function trainModel(_x, _x2, _x3) {\n        return _trainModel.apply(this, arguments);\n      }\n\n      return trainModel;\n    }()\n  }, {\n    key: \"testModel\",\n    value: function testModel(model, inputData, normalizationData) {\n      var inputMax = normalizationData.inputMax,\n          inputMin = normalizationData.inputMin,\n          labelMin = normalizationData.labelMin,\n          labelMax = normalizationData.labelMax;\n\n      var _tf$tidy = tf.tidy(function () {\n        var xs = tf.linspace(0, 1, 100);\n        var preds = model.predict(xs.reshape([100, 1]));\n        var unNormXs = xs.mul(inputMax.sub(inputMin)).add(inputMin);\n        var unNormPreds = preds.mul(labelMax.sub(labelMin)).add(labelMin);\n        return [unNormXs.dataSync(), unNormPreds.dataSync()];\n      }),\n          _tf$tidy2 = _slicedToArray(_tf$tidy, 2),\n          xs = _tf$tidy2[0],\n          preds = _tf$tidy2[1];\n\n      var predictedPoints = _Array$from(xs).map(function (val, i) {\n        return {\n          x: val,\n          y: preds[i]\n        };\n      });\n\n      var originalPoints = inputData.map(function (d) {\n        return {\n          x: d.horsepower,\n          y: d.mpg\n        };\n      });\n      tfvis.render.scatterplot({\n        name: 'Model Predictions vs Original Data'\n      }, {\n        values: [originalPoints, predictedPoints],\n        series: ['original', 'predicted']\n      }, {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      });\n    }\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var data, values, model, surface, tensorData, inputs, labels;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getData();\n\n              case 2:\n                data = _context3.sent;\n                values = data.map(function (d) {\n                  return {\n                    x: d.horsepower,\n                    y: d.mpg\n                  };\n                });\n                model = this.createModel();\n                surface = {\n                  name: 'Model Summary',\n                  tab: 'Model Inspection'\n                };\n                tfvis.show.modelSummary(surface, model);\n                tfvis.render.scatterplot({\n                  name: 'Horsepower v MPG',\n                  tab: 'Data'\n                }, {\n                  values: values\n                }, {\n                  xLabel: 'Horsepower',\n                  yLabel: 'MPG',\n                  height: 300\n                });\n                tensorData = this.convertToTensor(data);\n                inputs = tensorData.inputs, labels = tensorData.labels;\n                _context3.next = 12;\n                return this.trainModel(model, inputs, labels);\n\n              case 12:\n                console.log('Done Training');\n                this.testModel(model, data, tensorData);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function run() {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /*componentDidMount() {\n      this.run();\n    }*/\n\n  }, {\n    key: \"handleSizeChange\",\n    value: function handleSizeChange(event) {\n      this.setState({\n        size: event.target.value\n      });\n    }\n  }, {\n    key: \"handleActivationChange\",\n    value: function handleActivationChange(event) {\n      this.setState({\n        activation: event.target.value\n      });\n    }\n  }, {\n    key: \"handleBiasChange\",\n    value: function handleBiasChange(event) {\n      this.setState({\n        bias: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this2 = this;\n\n      console.log(this.state.activation);\n      this.setState(function (prevState) {\n        return {\n          layers: [].concat(_toConsumableArray(_this2.state.layers), [{\n            size: _this2.state.size,\n            activation: _this2.state.activation,\n            bias: _this2.state.bias\n          }])\n        };\n      });\n      event.preventDefault();\n    }\n    /*renderPreview() {\n      return(\n        this.state\n      )\n    }*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          fontFamily: 'Helvetica'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"MATH 270 Honors Project Demo\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"Design a neural network\"), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Dense Layer Generator\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Size:\", ' '), React.createElement(\"input\", {\n        type: \"number\",\n        name: \"units\",\n        value: this.state.size,\n        onChange: this.handleSizeChange,\n        min: \"1\",\n        max: \"100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        style: {\n          marginLeft: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Activation:\", ' '), React.createElement(\"select\", {\n        name: \"activation\",\n        value: this.state.activation,\n        onChange: this.handleActivationChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"None\"), React.createElement(\"option\", {\n        value: \"sigmoid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"Sigmoid\"), React.createElement(\"option\", {\n        value: \"relu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"ReLu\"))), React.createElement(\"label\", {\n        style: {\n          marginLeft: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Bias:\", ' '), React.createElement(\"input\", {\n        type: \"radio\",\n        value: \"true\",\n        checked: this.state.bias === 'true',\n        onChange: this.handleBiasChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), \"True\", React.createElement(\"input\", {\n        type: \"radio\",\n        value: \"false\",\n        checked: this.state.bias === 'false',\n        onChange: this.handleBiasChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }), \"False\"), React.createElement(\"input\", {\n        style: {\n          marginLeft: 20\n        },\n        type: \"submit\",\n        value: \"Add Layer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      })), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Preview:\"), this.state.layers.map(function (layer) {\n        return React.createElement(\"div\", {\n          style: {\n            width: '500px',\n            display: 'flex',\n            flexDirection: 'row',\n            backgroundColor: 'gray',\n            borderRadius: '15px',\n            padding: '25px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            flex: 1,\n            textAlign: 'center',\n            color: 'white'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250\n          },\n          __self: this\n        }, layer.size), React.createElement(\"div\", {\n          style: {\n            flex: 1,\n            textAlign: 'center',\n            color: 'white'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }, layer.activation), React.createElement(\"div\", {\n          style: {\n            flex: 1,\n            textAlign: 'center',\n            color: 'white'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }, layer.bias));\n      }), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \"Compile, train, and test model\"), React.createElement(\"script\", {\n        src: \"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }), React.createElement(\"script\", {\n        src: \"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport default Home;","map":{"version":3,"sources":["/Users/malcolmmcswain/Desktop/honors/ml-models/pages/index.js"],"names":["React","Home","props","state","size","activation","bias","layers","handleSizeChange","bind","handleActivationChange","handleBiasChange","handleSubmit","fetch","carsDataReq","json","carsData","cleaned","map","car","mpg","Miles_per_Gallon","horsepower","Horsepower","filter","model","tf","sequential","dense","inputShape","units","useBias","data","tidy","util","shuffle","inputs","d","labels","inputTensor","tensor2d","length","labelTensor","inputMax","max","inputMin","min","labelMax","labelMin","normalizedInputs","sub","div","normalizedLabels","compile","optimizer","train","adam","loss","losses","meanSquaredError","metrics","batchSize","epochs","fit","callbacks","tfvis","show","fitCallbacks","name","height","inputData","normalizationData","xs","linspace","preds","predict","reshape","unNormXs","mul","add","unNormPreds","dataSync","predictedPoints","val","i","x","y","originalPoints","render","scatterplot","values","series","xLabel","yLabel","getData","createModel","surface","tab","modelSummary","tensorData","convertToTensor","trainModel","console","log","testModel","event","setState","target","value","prevState","preventDefault","fontFamily","fontWeight","marginLeft","layer","width","display","flexDirection","backgroundColor","borderRadius","padding","flex","textAlign","color","Component"],"mappings":"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","sourcesContent":["import React from 'react'\n\nclass Home extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: 1,\n      activation: 'none',\n      bias: false,\n      layers: [],\n    };\n\n    this.handleSizeChange = this.handleSizeChange.bind(this);\n    this.handleActivationChange = this.handleActivationChange.bind(this);\n    this.handleBiasChange = this.handleBiasChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async getData() {\n    const carsDataReq = await fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');\n    const carsData = await carsDataReq.json();\n    const cleaned = carsData.map(car => ({\n      mpg: car.Miles_per_Gallon,\n      horsepower: car.Horsepower,\n    })).filter(car => (car.mpg != null && car.horsepower != null));\n\n    return cleaned;\n  }\n\n  createModel() {\n    const model = tf.sequential({\n      layers: [\n        tf.layers.dense({inputShape: [1], units: 16, useBias: true}),\n        tf.layers.dense({units: 50, activation: 'relu'}),\n        tf.layers.dense({units: 50, activation: 'sigmoid'}),\n        tf.layers.dense({units: 1, useBias: true}),\n      ]\n    });\n\n    return model;\n  }\n\n  convertToTensor(data) {\n    return tf.tidy(() => {\n      tf.util.shuffle(data);\n\n      const inputs = data.map(d => d.horsepower);\n      const labels = data.map(d => d.mpg);\n\n      const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\n      const labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n\n      const inputMax = inputTensor.max();\n      const inputMin = inputTensor.min();\n      const labelMax = labelTensor.max();\n      const labelMin = labelTensor.min();\n\n      const normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\n      const normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n\n      return {\n        inputs: normalizedInputs,\n        labels: normalizedLabels,\n        inputMax,\n        inputMin,\n        labelMax,\n        labelMin,\n      }\n    })\n  }\n\n  async trainModel(model, inputs, labels) {\n    model.compile({\n      optimizer: tf.train.adam(),\n      loss: tf.losses.meanSquaredError,\n      metrics: ['mse'],\n    });\n\n    const batchSize = 28;\n    const epochs = 100;\n\n    return await model.fit(inputs, labels, {\n      batchSize,\n      epochs,\n      shuffle: true,\n      callbacks: tfvis.show.fitCallbacks(\n        { name: 'Training Performance' },\n        ['loss', 'mse'],\n        {\n          height: 200,\n          callbacks: ['onEpochEnd']\n        }\n      )\n    });\n  }\n\n  testModel(model, inputData, normalizationData) {\n    const {inputMax, inputMin, labelMin, labelMax} = normalizationData;\n\n    const [xs, preds] = tf.tidy(() => {\n      const xs = tf.linspace(0, 1, 100);\n      const preds = model.predict(xs.reshape([100, 1]));\n\n      const unNormXs = xs.mul(inputMax.sub(inputMin)).add(inputMin);\n      const unNormPreds = preds.mul(labelMax.sub(labelMin)).add(labelMin);\n\n      return [unNormXs.dataSync(), unNormPreds.dataSync()];\n    });\n\n    const predictedPoints = Array.from(xs).map((val, i) => {\n      return {x: val, y: preds[i]}\n    });\n\n    const originalPoints = inputData.map(d => ({\n      x: d.horsepower,\n      y: d.mpg,\n    }));\n\n    tfvis.render.scatterplot(\n      {name: 'Model Predictions vs Original Data'},\n      {values: [originalPoints, predictedPoints], series: ['original', 'predicted']},\n      {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      }\n    );\n  }\n\n  async run() {\n\n    const data = await this.getData();\n    const values = data.map(d => ({\n      x: d.horsepower,\n      y: d.mpg,\n    }));\n\n    const model = this.createModel();\n    const surface = { name: 'Model Summary', tab: 'Model Inspection' };\n    tfvis.show.modelSummary(surface, model);\n\n    tfvis.render.scatterplot(\n      { name: 'Horsepower v MPG', tab: 'Data' },\n      {values},\n      {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      }\n    );\n\n    const tensorData = this.convertToTensor(data);\n    const {inputs, labels} = tensorData;\n\n    await this.trainModel(model, inputs, labels);\n    console.log('Done Training');\n\n    this.testModel(model, data, tensorData);\n  }\n\n  /*componentDidMount() {\n    this.run();\n  }*/\n\n  handleSizeChange(event) {\n    this.setState({size: event.target.value});\n  }\n\n  handleActivationChange(event) {\n    this.setState({activation: event.target.value});\n  }\n\n  handleBiasChange(event) {\n    this.setState({bias: event.target.value});\n  }\n\n  handleSubmit(event) {\n    console.log(this.state.activation);\n    this.setState(prevState => ({\n      layers: [...this.state.layers, {\n        size: this.state.size,\n        activation: this.state.activation,\n        bias: this.state.bias\n      }]\n    }));\n    event.preventDefault();\n  }\n\n  /*renderPreview() {\n    return(\n      this.state\n    )\n  }*/\n\n  render() {\n    return (\n      <div>\n\n        <h1 style={{fontFamily: 'Helvetica'}}>MATH 270 Honors Project Demo</h1>\n        <h2>Design a neural network</h2>\n\n        <form onSubmit={this.handleSubmit}>\n          <h3>Dense Layer Generator</h3>\n          <label>\n            <span style={{fontWeight: 'bold'}}>Size:{' '}</span>\n            <input\n              type=\"number\"\n              name=\"units\"\n              value={this.state.size}\n              onChange={this.handleSizeChange}\n              min=\"1\"\n              max=\"100\"\n            />\n          </label>\n          <label style={{marginLeft: 20}}>\n            <span style={{fontWeight: 'bold'}}>Activation:{' '}</span>\n            <select\n              name=\"activation\"\n              value={this.state.activation}\n              onChange={this.handleActivationChange}\n            >\n              <option value=\"none\">None</option>\n              <option value=\"sigmoid\">Sigmoid</option>\n              <option value=\"relu\">ReLu</option>\n            </select>\n          </label>\n          <label style={{marginLeft: 20}}>\n            <span style={{fontWeight: 'bold'}}>Bias:{' '}</span>\n            <input\n              type=\"radio\"\n              value=\"true\"\n              checked={this.state.bias === 'true'}\n              onChange={this.handleBiasChange}\n            />True\n            <input\n              type=\"radio\"\n              value=\"false\"\n              checked={this.state.bias === 'false'}\n              onChange={this.handleBiasChange}\n            />False\n          </label>\n          <input style={{marginLeft: 20}} type=\"submit\" value=\"Add Layer\" />\n        </form>\n\n        <h2>Preview:</h2>\n\n        {this.state.layers.map((layer) => (\n          <div style={{width: '500px', display: 'flex', flexDirection: 'row', backgroundColor: 'gray', borderRadius: '15px', padding: '25px'}}>\n            <div style={{flex: 1, textAlign: 'center', color: 'white'}}>{layer.size}</div>\n            <div style={{flex: 1, textAlign: 'center', color: 'white'}}>{layer.activation}</div>\n            <div style={{flex: 1, textAlign: 'center', color: 'white'}}>{layer.bias}</div>\n          </div>\n        ))}\n\n        <button>Compile, train, and test model</button>\n\n        <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>\n        <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\"></script>\n      </div>\n    )\n  }\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}