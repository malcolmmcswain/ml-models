{"version":3,"file":"static/webpack/static/development/pages/index.js.d380820351435df0b418.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react'\n\nclass Home extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: 1,\n      activation: 'none',\n      bias: false,\n      layers: [],\n    };\n\n    this.handleSizeChange = this.handleSizeChange.bind(this);\n    this.handleActivationChange = this.handleActivationChange.bind(this);\n    this.handleBiasChange = this.handleBiasChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async getData() {\n    const carsDataReq = await fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');\n    const carsData = await carsDataReq.json();\n    const cleaned = carsData.map(car => ({\n      mpg: car.Miles_per_Gallon,\n      horsepower: car.Horsepower,\n    })).filter(car => (car.mpg != null && car.horsepower != null));\n\n    return cleaned;\n  }\n\n  createModel() {\n    const model = tf.sequential({\n      layers: [\n        tf.layers.dense({inputShape: [1], units: 16, useBias: true}),\n        tf.layers.dense({units: 50, activation: 'relu'}),\n        tf.layers.dense({units: 50, activation: 'sigmoid'}),\n        tf.layers.dense({units: 1, useBias: true}),\n      ]\n    });\n\n    return model;\n  }\n\n  convertToTensor(data) {\n    return tf.tidy(() => {\n      tf.util.shuffle(data);\n\n      const inputs = data.map(d => d.horsepower);\n      const labels = data.map(d => d.mpg);\n\n      const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\n      const labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n\n      const inputMax = inputTensor.max();\n      const inputMin = inputTensor.min();\n      const labelMax = labelTensor.max();\n      const labelMin = labelTensor.min();\n\n      const normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\n      const normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n\n      return {\n        inputs: normalizedInputs,\n        labels: normalizedLabels,\n        inputMax,\n        inputMin,\n        labelMax,\n        labelMin,\n      }\n    })\n  }\n\n  async trainModel(model, inputs, labels) {\n    model.compile({\n      optimizer: tf.train.adam(),\n      loss: tf.losses.meanSquaredError,\n      metrics: ['mse'],\n    });\n\n    const batchSize = 28;\n    const epochs = 100;\n\n    return await model.fit(inputs, labels, {\n      batchSize,\n      epochs,\n      shuffle: true,\n      callbacks: tfvis.show.fitCallbacks(\n        { name: 'Training Performance' },\n        ['loss', 'mse'],\n        {\n          height: 200,\n          callbacks: ['onEpochEnd']\n        }\n      )\n    });\n  }\n\n  testModel(model, inputData, normalizationData) {\n    const {inputMax, inputMin, labelMin, labelMax} = normalizationData;\n\n    const [xs, preds] = tf.tidy(() => {\n      const xs = tf.linspace(0, 1, 100);\n      const preds = model.predict(xs.reshape([100, 1]));\n\n      const unNormXs = xs.mul(inputMax.sub(inputMin)).add(inputMin);\n      const unNormPreds = preds.mul(labelMax.sub(labelMin)).add(labelMin);\n\n      return [unNormXs.dataSync(), unNormPreds.dataSync()];\n    });\n\n    const predictedPoints = Array.from(xs).map((val, i) => {\n      return {x: val, y: preds[i]}\n    });\n\n    const originalPoints = inputData.map(d => ({\n      x: d.horsepower,\n      y: d.mpg,\n    }));\n\n    tfvis.render.scatterplot(\n      {name: 'Model Predictions vs Original Data'},\n      {values: [originalPoints, predictedPoints], series: ['original', 'predicted']},\n      {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      }\n    );\n  }\n\n  async run() {\n\n    const data = await this.getData();\n    const values = data.map(d => ({\n      x: d.horsepower,\n      y: d.mpg,\n    }));\n\n    const model = this.createModel();\n    const surface = { name: 'Model Summary', tab: 'Model Inspection' };\n    tfvis.show.modelSummary(surface, model);\n\n    tfvis.render.scatterplot(\n      { name: 'Horsepower v MPG', tab: 'Data' },\n      {values},\n      {\n        xLabel: 'Horsepower',\n        yLabel: 'MPG',\n        height: 300\n      }\n    );\n\n    const tensorData = this.convertToTensor(data);\n    const {inputs, labels} = tensorData;\n\n    await this.trainModel(model, inputs, labels);\n    console.log('Done Training');\n\n    this.testModel(model, data, tensorData);\n  }\n\n  /*componentDidMount() {\n    this.run();\n  }*/\n\n  handleSizeChange(event) {\n    this.setState({size: event.target.value});\n  }\n\n  handleActivationChange(event) {\n    this.setState({activation: event.target.value});\n  }\n\n  handleBiasChange(event) {\n    this.setState({bias: event.target.value});\n  }\n\n  handleSubmit(event) {\n    console.log(this.state.activation);\n    this.setState(prevState => ({\n      layers: [...this.state.layers, {\n        size: this.state.size,\n        activation: this.state.activation,\n        bias: this.state.bias\n      }]\n    }));\n    event.preventDefault();\n  }\n\n  /*renderPreview() {\n    return(\n      this.state\n    )\n  }*/\n\n  render() {\n    return (\n      <div>\n\n        <h1 style={{fontFamily: 'Helvetica'}}>MATH 270 Honors Project Demo</h1>\n        <h2>Design a neural network</h2>\n\n        <form onSubmit={this.handleSubmit}>\n          <h3>Dense Layer Generator</h3>\n          <label>\n            <span style={{fontWeight: 'bold'}}>Size:{' '}</span>\n            <input\n              type=\"number\"\n              name=\"units\"\n              value={this.state.size}\n              onChange={this.handleSizeChange}\n              min=\"1\"\n              max=\"100\"\n            />\n          </label>\n          <label style={{marginLeft: 20}}>\n            <span style={{fontWeight: 'bold'}}>Activation:{' '}</span>\n            <select\n              name=\"activation\"\n              value={this.state.activation}\n              onChange={this.handleActivationChange}\n            >\n              <option value=\"none\">None</option>\n              <option value=\"sigmoid\">Sigmoid</option>\n              <option value=\"relu\">ReLu</option>\n            </select>\n          </label>\n          <label style={{marginLeft: 20}}>\n            <span style={{fontWeight: 'bold'}}>Bias:{' '}</span>\n            <input\n              type=\"radio\"\n              value=\"true\"\n              checked={this.state.bias === 'true'}\n              onChange={this.handleBiasChange}\n            />True\n            <input\n              type=\"radio\"\n              value=\"false\"\n              checked={this.state.bias === 'false'}\n              onChange={this.handleBiasChange}\n            />False\n          </label>\n          <input style={{marginLeft: 20}} type=\"submit\" value=\"Add Layer\" />\n        </form>\n\n        <h3>Preview:</h3>\n\n        {/*<div style={{width: '500px', display: 'flex', flexDirection: 'row', padding: '25px'}}>\n          <div style={{flex: 1, textAlign: 'center', fontWeight: 'bold'}}>Size</div>\n          <div style={{flex: 1, textAlign: 'center', fontWeight: 'bold'}}>Activation</div>\n          <div style={{flex: 1, textAlign: 'center', fontWeight: 'bold'}}>Bias</div>\n        </div>*/}\n\n        <div style={{width: '500px', display: 'flex', flexDirection: 'row'}}>\n          {this.state.layers.map((layer) => (\n              <div>\n                <div style={{flex: 0.7, textAlign: 'center', color: 'white', backgroundColor: 'gray', borderRadius: '15px', padding: '100px 0'}}>\n                  {layer.size}<br />\n                  {layer.activation}<br />\n                  {layer.bias}<br />\n                </div>\n                <div style={{flex: 0.3, textAlign: 'center'}}>â†’</div>\n              </div>\n          ))}\n        </div>\n\n        <button>Compile, train, and test model</button>\n\n        <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>\n        <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\"></script>\n      </div>\n    )\n  }\n}\n\nexport default Home\n"],"mappings":"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","sourceRoot":""}